// <auto-generated />
using System;
using Core.Infrastructure.EfCoreDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Infrastructure.EfCoreDataAccess.Migrations
{
    [DbContext(typeof(CoreEfCoreDbContext))]
    [Migration("20210329233813_TransactionChanged")]
    partial class TransactionChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Core.Domain.Entities.Transactions.FeeTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("RequestBankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestBankAccountId");

                    b.ToTable("FeeTransactions");
                });

            modelBuilder.Entity("Core.Domain.Entities.Transactions.InternalTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("RequestBankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestBankAccountId");

                    b.ToTable("InternTransactions");
                });

            modelBuilder.Entity("Core.Domain.Entities.Transactions.TransferTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("RecieverBankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestBankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecieverBankAccountId");

                    b.HasIndex("RequestBankAccountId");

                    b.ToTable("TransferTransactions");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Bank")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Core.Domain.Entities.Transactions.FeeTransaction", b =>
                {
                    b.HasOne("Core.Domain.Entities.UserAccount", "RequestBankAccount")
                        .WithMany()
                        .HasForeignKey("RequestBankAccountId");

                    b.Navigation("RequestBankAccount");
                });

            modelBuilder.Entity("Core.Domain.Entities.Transactions.InternalTransaction", b =>
                {
                    b.HasOne("Core.Domain.Entities.UserAccount", "RequestBankAccount")
                        .WithMany()
                        .HasForeignKey("RequestBankAccountId");

                    b.Navigation("RequestBankAccount");
                });

            modelBuilder.Entity("Core.Domain.Entities.Transactions.TransferTransaction", b =>
                {
                    b.HasOne("Core.Domain.Entities.UserAccount", "RecieverBankAccount")
                        .WithMany()
                        .HasForeignKey("RecieverBankAccountId");

                    b.HasOne("Core.Domain.Entities.UserAccount", "RequestBankAccount")
                        .WithMany()
                        .HasForeignKey("RequestBankAccountId");

                    b.Navigation("RecieverBankAccount");

                    b.Navigation("RequestBankAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
